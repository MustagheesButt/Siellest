/**
 * TABLE OF CONTENTS
 *
 * SETTINGS
 * Global..................Globally-available variables and config.
 *
 * TOOLS
 * Mixins..................Useful mixins.
 *
 * COMPONENTS
 *
 *
 * MODULES
 *
 */
/*------------------------------------*\
  #SETTINGS
\*------------------------------------*/
/**
 * Returns the value of the `$key` value of a provided `$map`.
 */
/**
 * Uses `getProperty()` to return a value from the `$colors` map.
 */
/**
 * Uses `getProperty()` to return a value from the `$breakpoints` map.
 */
/*------------------------------------*\
  #TYPOGRAPHY
\*------------------------------------*/
/*------------------------------------*\
  #COLORS
\*------------------------------------*/
/*------------------------------------*\
  #ELEMENT-DEFAULTS
\*------------------------------------*/
/*------------------------------------*\
  #HEADER-DEFAULTS
\*------------------------------------*/
/*------------------------------------*\
  #HORIZONTAL-SPACING
\*------------------------------------*/
/*------------------------------------*\
  #BREAKPOINTS
\*------------------------------------*/
/*------------------------------------*\
  #TRANSITIONS
\*------------------------------------*/
/*------------------------------------*\
  #TOOLS
\*------------------------------------*/
/**
 * Responsive Mixin
 * This mixin is designed for a _cleaner_ first approach
 * This means that css isn't overridden but rather replaced for
 * different viewport widths; making it easier to inspect/debug css
 *
 * Usage:
 * @include media-query(exclude-medium)    { ... }
 * @include media-query(medium-up-to-site) 	   { ... }
 * ... etc
 */
/**
 * [Adds styles to allow an element's height scale proportionatelly]
 * @param  {[Number]} $width
 * @param  {[Number]} $height
 */
/**
 * [Calculates the percentage aspect ratio (what % height is compared to the width)]
 * @param  {[Number]} $width
 * @param  {[Number]} $height
 * @return {[Number(%)]}
 */
/**
 * *****REMEMBER TO USE MARGIN OR PADDING AND NOT TOP/BOTTOM******
 * [Calculates the center of an element in relation to a provided width and height.
 * Useful to place an absolute element at the center of another when
 * the positioned element cannot be the target's child ]
 * @param  {[Number]} $width
 * @param  {[Number]} $height
 * @return {[Number(%)]}
 */
/**
 * [In the  awful case you can't use Flexbox to vertically align something]
 * @param  {[type]} $transform:       false         [Use transforms to align instead of the absolute trick]
 * @param  {[type]} $pos:             absolute      [position type]
 * @param  {[type]} $posAdj:          0             [position adjustment. If $transform is true, this value only affects the 'top' property.]
 * @param  {[type]} $alignHorizontal: false         [Includes horizontal alignment]
 */
/**
 * Generate Enumerated Class
 * Iterates from 0 to the specified length and generates classes that set the specified property
 * @param  {[String]} $classname:       required      [Required: Specify the class name]
 * @param  {[String]} $property:        $classname    [Optional: Specify the enumerated property (if it's different from the name of the class)]
 * @param  {[Number]} $length:          10            [Optional: Specify the end of the loop]
 * @param  {[String]} $units:           null          [Optional: specify units to append to the enumerated property]
 */
/**
* [Strip the pesky units from values]
* @param  {[Number]} $value
*/
/**
* [Fluid Type]
*/
/**
 * Expose a single property to handle the different text-underline preferences for RTL vs LTR.
 */
/**
 * POSTCSS-RTL/POSTCSS-RTLCSS Has issues parsing inline comments when using production mode, which removes CSS comments.
 * Using the important comment syntax doesn't seem to work either, as that just results in appending the comment with no functionality.
 */
/*------------------------------------*\
  #COMPONENTS
\*------------------------------------*/
.contactus-country__form {
  position: relative;
  margin-bottom: 2rem;
}

.contactus-tile__header {
  margin-bottom: 0.75rem;
}

.contactus-tile__icon {
  width: 1.375rem;
}

.contactus-tile__ctas {
  margin-top: 0.875rem;
}

@media (min-width: 48rem) {
  .contactus-content {
    margin-top: 7.5rem;
  }

  .contactus-country__dropdown {
    max-width: 19.75rem;
    margin: auto;
  }

  .contactus-tile-col {
    margin-bottom: 5.5rem;
  }

  .contactus-tile__description {
    max-width: 17.5rem;
  }
}
@media (max-width: 47.9375rem) {
  .contactus-country__form {
    margin-top: 4.75rem;
  }

  .contactus-content {
    margin-top: 5rem;
  }

  .contactus-tile-col:not(:last-child) {
    margin-bottom: 3.125rem;
  }

  .contactus-tile__description {
    max-width: 19.125rem;
  }
}
html[lang=th-TH] #modal-bookAppointment, html[lang=th-TH] .contactus-country__form, html[lang=th-TH] .contactus-content, html[lang=th-TH] .modal__content .body-type--deci {
  font-size: 0.8rem;
}

/*# sourceMappingURL=contactUsMain.css.map*/