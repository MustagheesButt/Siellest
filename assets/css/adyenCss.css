/**
 * Returns the value of the `$key` value of a provided `$map`.
 */
/**
 * Uses `getProperty()` to return a value from the `$colors` map.
 */
/**
 * Uses `getProperty()` to return a value from the `$breakpoints` map.
 */
/*------------------------------------*\
  #TYPOGRAPHY
\*------------------------------------*/
/*------------------------------------*\
  #COLORS
\*------------------------------------*/
/*------------------------------------*\
  #ELEMENT-DEFAULTS
\*------------------------------------*/
/*------------------------------------*\
  #HEADER-DEFAULTS
\*------------------------------------*/
/*------------------------------------*\
  #HORIZONTAL-SPACING
\*------------------------------------*/
/*------------------------------------*\
  #BREAKPOINTS
\*------------------------------------*/
/*------------------------------------*\
  #TRANSITIONS
\*------------------------------------*/
/**
 * Responsive Mixin
 * This mixin is designed for a _cleaner_ first approach
 * This means that css isn't overridden but rather replaced for
 * different viewport widths; making it easier to inspect/debug css
 *
 * Usage:
 * @include media-query(exclude-medium)    { ... }
 * @include media-query(medium-up-to-site) 	   { ... }
 * ... etc
 */
/**
 * [Adds styles to allow an element's height scale proportionatelly]
 * @param  {[Number]} $width
 * @param  {[Number]} $height
 */
/**
 * [Calculates the percentage aspect ratio (what % height is compared to the width)]
 * @param  {[Number]} $width
 * @param  {[Number]} $height
 * @return {[Number(%)]}
 */
/**
 * *****REMEMBER TO USE MARGIN OR PADDING AND NOT TOP/BOTTOM******
 * [Calculates the center of an element in relation to a provided width and height.
 * Useful to place an absolute element at the center of another when
 * the positioned element cannot be the target's child ]
 * @param  {[Number]} $width
 * @param  {[Number]} $height
 * @return {[Number(%)]}
 */
/**
 * [In the  awful case you can't use Flexbox to vertically align something]
 * @param  {[type]} $transform:       false         [Use transforms to align instead of the absolute trick]
 * @param  {[type]} $pos:             absolute      [position type]
 * @param  {[type]} $posAdj:          0             [position adjustment. If $transform is true, this value only affects the 'top' property.]
 * @param  {[type]} $alignHorizontal: false         [Includes horizontal alignment]
 */
/**
 * Generate Enumerated Class
 * Iterates from 0 to the specified length and generates classes that set the specified property
 * @param  {[String]} $classname:       required      [Required: Specify the class name]
 * @param  {[String]} $property:        $classname    [Optional: Specify the enumerated property (if it's different from the name of the class)]
 * @param  {[Number]} $length:          10            [Optional: Specify the end of the loop]
 * @param  {[String]} $units:           null          [Optional: specify units to append to the enumerated property]
 */
/**
* [Strip the pesky units from values]
* @param  {[Number]} $value
*/
/**
* [Fluid Type]
*/
/**
 * Expose a single property to handle the different text-underline preferences for RTL vs LTR.
 */
/**
 * POSTCSS-RTL/POSTCSS-RTLCSS Has issues parsing inline comments when using production mode, which removes CSS comments.
 * Using the important comment syntax doesn't seem to work either, as that just results in appending the comment with no functionality.
 */
.adyen-payment-item:not(:last-child) {
  margin-bottom: 2rem;
}

.adyen-payment-option {
  margin-bottom: 1rem;
}

.adyen-payment-option__icon {
  display: inline-block;
  vertical-align: middle;
  width: 2rem;
}

.adyen-checkout__input-wrapper .adyen-checkout__dropdown__list {
  z-index: 10;
}

.adyen-payment-fields .adyen-checkout__label__text {
  font-family: "Fancy Cut", "Almarai", Times, serif;
  font-weight: 300;
  font-size: 1rem;
  padding-bottom: 0.25rem;
  color: #8C8C8C;
  line-height: inherit;
}
.adyen-payment-fields .adyen-checkout__label--focused .adyen-checkout__label__text {
  color: #8C8C8C;
}
.adyen-payment-fields .adyen-checkout__input {
  border-radius: 0;
  border-bottom: solid 0.0625rem #1D1C1C;
  padding-left: 0;
  padding-right: 0;
  height: 2.1875rem;
}
.adyen-payment-fields .adyen-checkout__input, .adyen-payment-fields .adyen-checkout__input:hover, .adyen-payment-fields .adyen-checkout__input:active, .adyen-payment-fields .adyen-checkout__input:active:hover,
.adyen-payment-fields .adyen-checkout__input--focus,
.adyen-payment-fields .adyen-checkout__input--focus:hover,
.adyen-payment-fields .adyen-checkout__input--focus:active,
.adyen-payment-fields .adyen-checkout__input--focus:active:hover {
  border-top: none;
  border-right: none;
  border-left: none;
  -webkit-box-shadow: none;
          box-shadow: none;
  border-color: #1D1C1C;
}
.adyen-payment-fields .adyen-checkout__input--error, .adyen-payment-fields .adyen-checkout__input--error:hover {
  color: #e60000;
  border-color: #e60000;
}
.adyen-payment-fields .adyen-checkout__input--disabled {
  background-color: #F9F9F9;
}

[dir="ltr"] .adyen-payment-fields .adyen-checkout-input__inline-validation,
[dir="ltr"] .adyen-payment-fields .adyen-checkout__card__cardNumber__brandIcon {
  right: 0;
}

[dir="rtl"] .adyen-payment-fields .adyen-checkout-input__inline-validation,
[dir="rtl"] .adyen-payment-fields .adyen-checkout__card__cardNumber__brandIcon {
  left: 0;
}

[dir="ltr"] .adyen-payment-fields .adyen-checkout__card__cvc__hint__wrapper {
  margin-right: 0;
}

[dir="rtl"] .adyen-payment-fields .adyen-checkout__card__cvc__hint__wrapper {
  margin-left: 0;
}
.adyen-payment-fields .adyen-checkout__card__cvc__hint {
  top: 0;
  bottom: 0;
  margin: auto;
}

@media (max-width: 47.9375rem) {
  [dir="ltr"] .adyen-payment-list--multi {
    padding-left: 2rem;
  }

  [dir="rtl"] .adyen-payment-list--multi {
    padding-right: 2rem;
  }
}

/*# sourceMappingURL=adyenCss.css.map*/