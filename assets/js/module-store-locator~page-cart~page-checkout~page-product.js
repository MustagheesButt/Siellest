(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["module-store-locator~page-cart~page-checkout~page-product"],{

/***/ "./cartridges/app_rna_core/cartridge/client/default/js/modules/module.store-locator.js":
/*!*********************************************************************************************!*\
  !*** ./cartridges/app_rna_core/cartridge/client/default/js/modules/module.store-locator.js ***!
  \*********************************************************************************************/
/*! exports provided: init, updateStoresResults, requestStoreSearch, removeTargetFormData, updateTargetFormData, displayStoreSelection, getSelectedStoreInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"init\", function() { return init; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateStoresResults\", function() { return updateStoresResults; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"requestStoreSearch\", function() { return requestStoreSearch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeTargetFormData\", function() { return removeTargetFormData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateTargetFormData\", function() { return updateTargetFormData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"displayStoreSelection\", function() { return displayStoreSelection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSelectedStoreInput\", function() { return getSelectedStoreInput; });\n/* harmony import */ var _helpers_pubSub__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/pubSub */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/helpers/pubSub.js\");\n/* harmony import */ var _components_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/dialog */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/components/dialog.js\");\n/* harmony import */ var _components_progress__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/progress */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/components/progress.js\");\n/* harmony import */ var _module_ajax_form__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./module.ajax-form */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/modules/module.ajax-form.js\");\n/* harmony import */ var load_google_maps_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! load-google-maps-api */ \"./node_modules/load-google-maps-api/index.js\");\n/* harmony import */ var load_google_maps_api__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(load_google_maps_api__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _checkout_summaryHelpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../checkout/summaryHelpers */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/checkout/summaryHelpers.js\");\n/* harmony import */ var _helpers_utilities__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/utilities */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/helpers/utilities.js\");\n/* harmony import */ var _borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @borngroup/born-utilities */ \"./node_modules/@borngroup/born-utilities/dist/born-utilities.min.js\");\n/* harmony import */ var _borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _helpers_urlUtilities__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/urlUtilities */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/helpers/urlUtilities.js\");\n\n\n\n\n\n\n\n\n\n\n //U.S. Map in the center of the viewport\n\nvar INITIAL_LAT = 37.09024,\n    INITIAL_LNG = -95.712891,\n    storeIDInputName = 'storeId',\n    APIConfig = {\n  key: window.SFRA.SitePreferences.mapsAPIKey\n};\nfunction init(elements) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  load_google_maps_api__WEBPACK_IMPORTED_MODULE_4___default()(APIConfig).then(function (mapsAPI) {\n    options.mapsAPI = mapsAPI;\n    Object(_borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_7__[\"callbackOnElements\"])(elements, _setupLocator.bind(this, options));\n  });\n}\n/**\n * Renders the results of the search and updates the map\n * @param {Object} data - Response from the server\n */\n\nfunction updateStoresResults(response, payload, locatorSettings) {\n  var resultsEl = locatorSettings.locatorEl.querySelector('[data-locator-component=\"result-list\"]'),\n      hasResults = response.stores.length;\n\n  _storeSelectionHandler(locatorSettings);\n\n  _toggleNoResults(!hasResults);\n\n  resultsEl.textContent = '';\n\n  _renderMap(response, payload, locatorSettings);\n\n  if (response.storesResultsHtml) {\n    resultsEl.insertAdjacentHTML('afterbegin', response.storesResultsHtml);\n\n    _storeSelectionListener(locatorSettings);\n  }\n\n  Object(_helpers_utilities__WEBPACK_IMPORTED_MODULE_6__[\"initModules\"])(resultsEl);\n  Object(_helpers_pubSub__WEBPACK_IMPORTED_MODULE_0__[\"publish\"])('storeLocator:updateRendered', {\n    response: response,\n    payload: payload,\n    locatorSettings: locatorSettings\n  }); // Override for Denali\n\n  if (window.SFRA.Denali) {\n    var boutiqueSelect = locatorSettings.locatorEl.querySelector('[data-denali-boutique-select]');\n    boutiqueSelect.options.length = 1;\n    [].forEach.call(response.stores, function (store) {\n      boutiqueSelect.add(new Option(store.name, store.ID));\n    });\n    boutiqueSelect.focus();\n    locatorSettings.locatorEl.querySelector('[data-denali-boutique-action]').classList.add('disabled');\n    locatorSettings.locatorEl.querySelector('[data-focusout-element]').focus();\n  }\n}\n/**\n * Sends a request to check if there are any stores within the specified search query + radius.\n */\n\nfunction requestStoreSearch(url, payload, locatorSettings) {\n  if (_shouldRequestSearch(locatorSettings)) {\n    _components_progress__WEBPACK_IMPORTED_MODULE_2__[\"showLoader\"]();\n    return $.ajax({\n      url: url || window.SFRA.Urls.storeLocatorFindStores,\n      type: 'GET',\n      data: payload,\n      dataType: 'json',\n      success: function success(response) {\n        if (locatorSettings.prompt) {\n          _openLocatorModal(response, payload, locatorSettings);\n        } else {\n          updateStoresResults(response, payload, locatorSettings);\n        }\n\n        Object(_helpers_pubSub__WEBPACK_IMPORTED_MODULE_0__[\"publish\"])('storeLocator:updateRequested', {\n          response: response,\n          payload: payload,\n          locatorSettings: locatorSettings\n        });\n        _components_progress__WEBPACK_IMPORTED_MODULE_2__[\"hideLoader\"]();\n      }\n    });\n  } else {\n    return $.Deferred().resolve({\n      noRequest: true\n    }).promise();\n  }\n}\nfunction removeTargetFormData(locatorSettings) {\n  var selectedStoreIDInput = getSelectedStoreInput(locatorSettings.targetFormEl),\n      selectedStoreDisplayEl = locatorSettings.targetFormEl.querySelector('[data-locator-component=\"selected-store-display\"]');\n  delete locatorSettings.locatorReviewed;\n  delete locatorSettings.locatorStoreSelected;\n\n  if (selectedStoreIDInput) {\n    selectedStoreIDInput.value = '';\n  }\n\n  if (selectedStoreDisplayEl) {\n    selectedStoreDisplayEl.classList.add('hidden');\n  }\n}\nfunction updateTargetFormData(locatorSettings) {\n  var storeData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var displaySelection = arguments.length > 2 ? arguments[2] : undefined;\n  var selectedStoreIDInput = getSelectedStoreInput(locatorSettings.targetFormEl) || Object(_borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_7__[\"createElWithAttrs\"])(locatorSettings.targetFormEl, {\n    'type': 'hidden',\n    'data-locator-component': 'selected-store-id',\n    'name': storeIDInputName\n  }, 'input'),\n      selectedStoreRemoveEl = locatorSettings.targetFormEl.querySelector('[data-locator-component=\"selected-store-remove\"]');\n  selectedStoreIDInput.value = storeData.storeID || selectedStoreIDInput.value;\n  locatorSettings.locatorReviewed = true;\n\n  if (selectedStoreIDInput.value) {\n    locatorSettings.locatorStoreSelected = true;\n  }\n\n  if (displaySelection) {\n    displayStoreSelection(locatorSettings, storeData);\n  }\n\n  if (selectedStoreRemoveEl) {\n    selectedStoreRemoveEl.addEventListener('click', removeTargetFormData.bind(this, locatorSettings));\n  }\n}\nfunction displayStoreSelection(locatorSettings, storeData) {\n  var selectedStoreDisplayEl = locatorSettings.targetFormEl.querySelector('[data-locator-component=\"selected-store-display\"]');\n\n  if (selectedStoreDisplayEl && storeData.storeInfo) {\n    selectedStoreDisplayEl.classList.remove('hidden');\n    Object(_checkout_summaryHelpers__WEBPACK_IMPORTED_MODULE_5__[\"populateAddressSummary\"])(selectedStoreDisplayEl, storeData.storeInfo);\n  }\n}\nfunction getSelectedStoreInput(targetFormEl) {\n  return targetFormEl ? targetFormEl.querySelector(\"[data-locator-component=\\\"selected-store-id\\\"], [name=\\\"\".concat(storeIDInputName, \"\\\"]\")) : null;\n}\n\nfunction _setupLocator() {\n  var locatorSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var locatorEl = arguments.length > 1 ? arguments[1] : undefined;\n  var hasCustomSettings = locatorEl.getAttribute('data-locator'),\n      locatorElIsForm = locatorEl.tagName === 'FORM';\n  locatorSettings = Object(_helpers_utilities__WEBPACK_IMPORTED_MODULE_6__[\"objectAssign\"])({}, locatorSettings, hasCustomSettings ? JSON.parse(hasCustomSettings) : {});\n  locatorSettings.locatorEl = locatorEl;\n  locatorSettings.targetFormEl = locatorSettings.targetFormEl || (locatorSettings.targetFormSelector ? document.querySelector(locatorSettings.targetFormSelector) : locatorElIsForm ? locatorEl : null); //If locator is configured as a prompt, display and configure only after an event happens.\n\n  if (locatorSettings.prompt) {\n    locatorSettings.locatorEl.addEventListener('submit', function (evt) {\n      //Set this since the flag was removed when opening the modal.\n      locatorSettings.prompt = true;\n      evt.preventDefault();\n\n      if (_shouldRequestSearch(locatorSettings)) {\n        requestStoreSearch('', {}, locatorSettings);\n      } else {\n        _submitTargetForm(locatorSettings);\n      }\n    });\n  } else {\n    //Otherwise just setup the current locator.\n    _renderMap({}, {}, locatorSettings);\n\n    _setUIElements(locatorSettings);\n\n    if (locatorSettings.locatorForm) {\n      _setupEventListeners(locatorSettings);\n    }\n  }\n\n  locatorEl.removeAttribute('data-locator'); // Override for Denali\n\n  if (window.SFRA.Denali) {\n    var boutiqueSelect = locatorEl.querySelector('[data-denali-boutique-select]'),\n        availabilityCTA = locatorEl.querySelector('[data-denali-boutique-action]');\n\n    if (boutiqueSelect && availabilityCTA) {\n      boutiqueSelect.addEventListener('change', function () {\n        [].forEach.call(locatorEl.querySelectorAll('[data-denali-boutique-list-item]'), function (currentItem) {\n          currentItem.classList.add('hidden');\n        });\n\n        if (this.value) {\n          availabilityCTA.classList.remove('disabled');\n        } else {\n          availabilityCTA.classList.add('disabled');\n        }\n      });\n      availabilityCTA.addEventListener('click', function () {\n        var storeId = boutiqueSelect.value,\n            storeListItem = document.getElementById(storeId);\n\n        if (storeListItem) {\n          storeListItem.classList.remove('hidden');\n        }\n      });\n    }\n  }\n\n  return locatorSettings;\n}\n/**\n * Customized google map marker icon with svg format\n */\n\n\nfunction _getMarkerIcon(locatorSettings) {\n  return {\n    path: 'M13.5,30.1460153 L16.8554555,25.5 L20.0024287,25.5 C23.039087,25.5 25.5,' + '23.0388955 25.5,20.0024287 L25.5,5.99757128 C25.5,2.96091298 23.0388955,0.5 ' + '20.0024287,0.5 L5.99757128,0.5 C2.96091298,0.5 0.5,2.96110446 0.5,5.99757128 ' + 'L0.5,20.0024287 C0.5,23.039087 2.96110446,25.5 5.99757128,25.5 L10.1445445,' + '25.5 L13.5,30.1460153 Z',\n    fillColor: '#0070d2',\n    fillOpacity: 1,\n    scale: 1.1,\n    strokeColor: 'white',\n    strokeWeight: 1,\n    anchor: new locatorSettings.mapsAPI.Point(13, 30),\n    labelOrigin: new locatorSettings.mapsAPI.Point(12, 12)\n  };\n}\n\nfunction _toggleNoResults(show) {\n  var noResultsEl = document.querySelector('[data-locator-component=\"no-results\"]');\n\n  if (show) {\n    noResultsEl.classList.remove('hidden');\n  } else {\n    noResultsEl.classList.add('hidden');\n  }\n}\n\nfunction _toggleNoAPI(show) {\n  var noAPIEl = document.querySelector('[data-locator-component=\"no-api\"]');\n\n  if (show) {\n    noAPIEl.classList.remove('hidden');\n  } else {\n    noAPIEl.classList.add('hidden');\n  }\n}\n/**\n * Uses google maps api to render a map\n */\n\n\nfunction _renderMap() {\n  var response = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var locatorSettings = arguments.length > 2 ? arguments[2] : undefined;\n  var mapTargetEl = locatorSettings.locatorEl.querySelector('[data-locator-component=\"map\"]');\n\n  if (!mapTargetEl) {\n    return false;\n  }\n\n  if (mapTargetEl.hasAttribute('data-has-google-api')) {\n    var mapLocations = JSON.parse(response && response.locations ? response.locations : mapTargetEl.getAttribute('data-locations')),\n        infowindow = new locatorSettings.mapsAPI.InfoWindow(),\n        latlng = new locatorSettings.mapsAPI.LatLng(payload.lat || INITIAL_LAT, payload.long || INITIAL_LNG),\n        mapOptions = {\n      zoom: payload.lat ? 12 : 4,\n      center: latlng,\n      streetViewControl: false\n    },\n        mapObject = new locatorSettings.mapsAPI.Map(mapTargetEl, mapOptions),\n        mapBounds = new locatorSettings.mapsAPI.LatLngBounds();\n    Object.keys(mapLocations).forEach(function (key) {\n      var locationItem = mapLocations[key],\n          locationLabel = parseInt(key, 10) + 1,\n          storeLocation = new locatorSettings.mapsAPI.LatLng(locationItem.latitude, locationItem.longitude),\n          markerObject = new locatorSettings.mapsAPI.Marker({\n        position: storeLocation,\n        map: mapObject,\n        title: locationItem.name,\n        icon: _getMarkerIcon(locatorSettings),\n        label: {\n          text: locationLabel.toString(),\n          color: 'white',\n          fontSize: '16px'\n        }\n      });\n      markerObject.addListener('click', function () {\n        infowindow.setOptions({\n          content: locationItem.infoWindowHtml\n        });\n        infowindow.open(mapObject, markerObject);\n      }); // Create a minimum bound based on a set of storeLocations\n\n      mapBounds.extend(markerObject.position);\n    }); // Fit the all the store marks in the center of a minimum bounds when any store has been found.\n\n    if (mapLocations && mapLocations.length) {\n      mapObject.fitBounds(mapBounds);\n    }\n  } else {\n    _toggleNoAPI(true);\n  }\n}\n/**\n * Search for stores with new search terms\n * @param {HTMLElement} element - the target html element\n * @returns {boolean} false to prevent default event\n */\n\n\nfunction _storeSearchHandler(locatorSettings, evt) {\n  var payload = Object(_helpers_urlUtilities__WEBPACK_IMPORTED_MODULE_8__[\"getQueryStringParams\"])($(locatorSettings.locatorForm).find(':input').serialize());\n\n  if (evt) {\n    evt.preventDefault();\n  }\n\n  if (payload.postalCode || payload.locality) {\n    var geocoder = new locatorSettings.mapsAPI.Geocoder(),\n        searchObject = {\n      address: payload.postalCode || payload.locality,\n      componentRestrictions: {}\n    };\n    _components_progress__WEBPACK_IMPORTED_MODULE_2__[\"showLoader\"]();\n\n    if (payload.locality) {\n      searchObject.componentRestrictions.locality = payload.locality;\n    }\n\n    if (payload.country) {\n      searchObject.componentRestrictions.country = payload.country;\n    } //Support for determining the location from the input address.\n\n\n    geocoder.geocode(searchObject, function (results) {\n      //Only attempt to access the lat/lang properties if there are any matching results.\n      if (results.length) {\n        var resultsLocation = results[0].geometry.location;\n        delete payload.postalCode;\n        payload.lat = resultsLocation.lat();\n        payload.long = resultsLocation.lng();\n      }\n\n      requestStoreSearch(locatorSettings.locatorForm.getAttribute('action'), payload, locatorSettings);\n    });\n  }\n\n  return false;\n}\n\nfunction _openLocatorModal(response, payload, locatorSettings) {\n  var promptURL = typeof locatorSettings.prompt === 'string' ? locatorSettings.prompt : window.SFRA.Urls.storeLocatorModal; //Remove these properties once the modal is open to avoid re-opening the same modal results.\n\n  delete locatorSettings.prompt;\n  load_google_maps_api__WEBPACK_IMPORTED_MODULE_4___default()(APIConfig).then(function (mapsAPI) {\n    var dialogSettings;\n    locatorSettings.mapsAPI = mapsAPI;\n    dialogSettings = {\n      options: {\n        modalID: 'storeLocator',\n        modalClass: 'modal--flex modal--store-locator modal--small-full',\n        overlayOthers: true,\n        keepAlive: false,\n        afterCloseCallback: _storeSelectionClosed.bind(this, locatorSettings)\n      },\n      callback: function callback(modal) {\n        var updatedLocatorSettings = _setupLocator(locatorSettings, modal);\n\n        Object(_helpers_pubSub__WEBPACK_IMPORTED_MODULE_0__[\"publish\"])('storeLocator:updateRendered', {\n          response: response,\n          payload: payload,\n          locatorSettings: updatedLocatorSettings\n        });\n      }\n    };\n\n    if (response.storesResultsHtml) {\n      dialogSettings.html = response.storesResultsHtml;\n    } else {\n      dialogSettings.url = Object(_helpers_urlUtilities__WEBPACK_IMPORTED_MODULE_8__[\"appendParamsToURL\"])(promptURL, payload);\n      dialogSettings.type = 'html';\n    }\n\n    _components_dialog__WEBPACK_IMPORTED_MODULE_1__[\"open\"](dialogSettings);\n  });\n}\n\nfunction _getSelectedStoreData(locatorSettings, evt) {\n  var selectedStore = locatorSettings.locatorEl.querySelector('[data-locator-component=\"result-list\"] :checked');\n  return selectedStore ? {\n    storeID: selectedStore.value,\n    searchRadius: locatorSettings.radiusEl.value,\n    searchPostalCode: locatorSettings.searchEl.value,\n    storeInfo: JSON.parse(selectedStore.getAttribute('data-store-info')),\n    event: evt\n  } : {};\n}\n\nfunction _detectLocationHandler(locatorSettings) {\n  _components_progress__WEBPACK_IMPORTED_MODULE_2__[\"showLoader\"]();\n\n  if (!navigator.geolocation) {\n    _components_progress__WEBPACK_IMPORTED_MODULE_2__[\"hideLoader\"]();\n    return;\n  }\n\n  navigator.geolocation.getCurrentPosition(function (position) {\n    var locatorForm = locatorSettings.locatorForm,\n        searchEl = locatorSettings.searchEl,\n        urlParams = {\n      radius: locatorSettings.radiusEl.value,\n      lat: position.coords.latitude,\n      long: position.coords.longitude\n    };\n    searchEl.value = \"\".concat(position.coords.latitude, \", \").concat(position.coords.longitude);\n    requestStoreSearch(locatorForm.getAttribute('action'), urlParams, locatorSettings);\n  });\n}\n/**\n * Handle clicking on the \"Cancel\" option when presented with a store list.\n * @param  {[type]} evt [description]\n * @return {[type]}     [description]\n */\n\n\nfunction _ignoreSelectionHandler(locatorSettings, evt) {\n  evt.preventDefault();\n\n  _targetFormHandler(locatorSettings);\n\n  Object(_helpers_pubSub__WEBPACK_IMPORTED_MODULE_0__[\"publish\"])('storeLocator:ignored', {\n    locatorSettings: locatorSettings\n  });\n  Object(_helpers_pubSub__WEBPACK_IMPORTED_MODULE_0__[\"publish\"])('storeLocator:reviewed', {\n    locatorSettings: locatorSettings\n  });\n}\n\nfunction _confirmSelectionHandler(locatorSettings, evt) {\n  var storeData = _getSelectedStoreData(locatorSettings, evt);\n\n  evt.preventDefault();\n\n  _targetFormHandler(locatorSettings, storeData);\n\n  Object(_helpers_pubSub__WEBPACK_IMPORTED_MODULE_0__[\"publish\"])('storeLocator:confirmed', {\n    locatorSettings: locatorSettings,\n    storeData: storeData\n  });\n  Object(_helpers_pubSub__WEBPACK_IMPORTED_MODULE_0__[\"publish\"])('storeLocator:reviewed', {\n    locatorSettings: locatorSettings,\n    storeData: storeData\n  });\n}\n\nfunction _storeSelectionHandler(locatorSettings, evt) {\n  var storeData = _getSelectedStoreData(locatorSettings, evt);\n\n  if (locatorSettings.confirmSelectionAction) {\n    locatorSettings.confirmSelectionAction.disabled = !evt;\n  }\n\n  Object(_helpers_pubSub__WEBPACK_IMPORTED_MODULE_0__[\"publish\"])('storeLocator:selected', {\n    locatorSettings: locatorSettings,\n    storeData: storeData\n  });\n}\n/**\n * Fires an event when the store selection modal is closed.\n */\n\n\nfunction _storeSelectionClosed(locatorSettings) {\n  Object(_helpers_pubSub__WEBPACK_IMPORTED_MODULE_0__[\"publish\"])('storeLocator:closed', {\n    locatorSettings: locatorSettings\n  });\n}\n\nfunction _targetFormHandler(locatorSettings, storeData) {\n  if (locatorSettings.targetFormEl) {\n    updateTargetFormData(locatorSettings, storeData, true);\n\n    _submitTargetForm(locatorSettings);\n  }\n}\n/**\n * Submits the targetForm. Process the form through module.ajax-form if the `ajaxForm` option is provided.\n */\n\n\nfunction _submitTargetForm(locatorSettings) {\n  if (locatorSettings.submitOnConfirm) {\n    if (locatorSettings.ajaxForm) {\n      Object(_module_ajax_form__WEBPACK_IMPORTED_MODULE_3__[\"processAjaxForm\"])(locatorSettings.targetFormEl);\n    } else {\n      //TODO: Some browsers do not allow to fire certain default events, such as a form's \"submit\", through JS.\n      //Dispatch a custom \"storeSelected\" for now.\n      Object(_helpers_utilities__WEBPACK_IMPORTED_MODULE_6__[\"dispatchEvent\"])(locatorSettings.targetFormEl, 'storeSelected');\n    }\n  }\n}\n/**\n * Listens for changes on the store results list. i.e. when a store is clicked the map changes, etc.\n */\n\n\nfunction _storeSelectionListener(locatorSettings) {\n  Object(_helpers_utilities__WEBPACK_IMPORTED_MODULE_6__[\"addEventListenerList\"])('[data-locator-component=\"store-info\"]', 'change', _storeSelectionHandler.bind(this, locatorSettings));\n}\n\nfunction _setUIElements(locatorSettings) {\n  locatorSettings.locatorForm = locatorSettings.locatorEl.querySelector('[data-locator-component=\"form\"]');\n  locatorSettings.searchEl = locatorSettings.locatorEl.querySelector('[data-locator-component=\"search-field\"]');\n  locatorSettings.submitEl = locatorSettings.locatorEl.querySelector('[data-locator-component=\"submit\"]');\n  locatorSettings.radiusEl = locatorSettings.locatorEl.querySelector('[data-locator-component=\"radius-field\"]');\n  locatorSettings.localityEl = locatorSettings.locatorEl.querySelector('[data-locator-component=\"locality-field\"]');\n  locatorSettings.detectLocationEl = locatorSettings.locatorEl.querySelector('[data-locator-component=\"detect-location\"]');\n  locatorSettings.confirmSelectionAction = locatorSettings.locatorEl.querySelector('[data-locator-component=\"confirm-selection\"]');\n  locatorSettings.ignoreSelectionAction = locatorSettings.locatorEl.querySelector('[data-locator-component=\"ignore-selection\"]');\n}\n\nfunction _setupEventListeners(locatorSettings) {\n  // clicking on detect location.\n  if (locatorSettings.detectLocationEl) {\n    locatorSettings.detectLocationEl.addEventListener('click', _detectLocationHandler.bind(locatorSettings.detectLocationEl, locatorSettings));\n  }\n\n  if (locatorSettings.radiusEl) {\n    locatorSettings.radiusEl.addEventListener('change', _storeSearchHandler.bind(locatorSettings.radiusEl, locatorSettings));\n  }\n\n  if (locatorSettings.localityEl) {\n    locatorSettings.localityEl.addEventListener('change', _storeSearchHandler.bind(locatorSettings.localityEl, locatorSettings));\n  }\n\n  if (locatorSettings.locatorForm.tagName === 'FORM') {\n    locatorSettings.locatorForm.addEventListener('submit', _storeSearchHandler.bind(locatorSettings.locatorForm, locatorSettings));\n  } else {\n    locatorSettings.submitEl.addEventListener('click', _storeSearchHandler.bind(locatorSettings.submitEl, locatorSettings));\n  }\n\n  _storeSelectionListener(locatorSettings);\n\n  if (locatorSettings.confirmSelectionAction) {\n    locatorSettings.confirmSelectionAction.addEventListener('click', _confirmSelectionHandler.bind(locatorSettings.confirmSelectionAction, locatorSettings));\n  }\n\n  if (locatorSettings.ignoreSelectionAction) {\n    locatorSettings.ignoreSelectionAction.addEventListener('click', _ignoreSelectionHandler.bind(locatorSettings.ignoreSelectionAction, locatorSettings));\n  }\n}\n/**\n * Checks if the current `locatorSettings.targetFormEl` already has selected a store,\n * by checking if it can find a `[data-locator-component=\"selected-store-id\"]` with a value in it.\n */\n\n\nfunction _shouldRequestSearch(locatorSettings) {\n  var selectedStoreIDInput = getSelectedStoreInput(locatorSettings.targetFormEl);\n  return !selectedStoreIDInput || !selectedStoreIDInput.value || locatorSettings.allowSearchAfterSelection;\n}\n\n//# sourceURL=webpack:///./cartridges/app_rna_core/cartridge/client/default/js/modules/module.store-locator.js?");

/***/ }),

/***/ "./node_modules/load-google-maps-api/index.js":
/*!****************************************************!*\
  !*** ./node_modules/load-google-maps-api/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var CALLBACK_NAME = '__googleMapsApiOnLoadCallback'\n\nvar OPTIONS_KEYS = ['channel', 'client', 'key', 'language', 'region', 'v']\n\nvar promise = null\n\nmodule.exports = function (options) {\n  options = options || {}\n\n  if (!promise) {\n    promise = new Promise(function (resolve, reject) {\n      // Reject the promise after a timeout\n      var timeoutId = setTimeout(function () {\n        window[CALLBACK_NAME] = function () {} // Set the on load callback to a no-op\n        reject(new Error('Could not load the Google Maps API'))\n      }, options.timeout || 10000)\n\n      // Hook up the on load callback\n      window[CALLBACK_NAME] = function () {\n        if (timeoutId !== null) {\n          clearTimeout(timeoutId)\n        }\n        resolve(window.google.maps)\n        delete window[CALLBACK_NAME]\n      }\n\n      // Prepare the `script` tag to be inserted into the page\n      var scriptElement = document.createElement('script')\n      var params = ['callback=' + CALLBACK_NAME]\n      OPTIONS_KEYS.forEach(function (key) {\n        if (options[key]) {\n          params.push(key + '=' + options[key])\n        }\n      })\n      if (options.libraries && options.libraries.length) {\n        params.push('libraries=' + options.libraries.join(','))\n      }\n      scriptElement.src =\n        'https://maps.googleapis.com/maps/api/js?' + params.join('&')\n\n      // Insert the `script` tag\n      document.body.appendChild(scriptElement)\n    })\n  }\n\n  return promise\n}\n\n\n//# sourceURL=webpack:///./node_modules/load-google-maps-api/index.js?");

/***/ })

}]);