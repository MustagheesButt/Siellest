(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["module-address-autocomplete"],{

/***/ "./cartridges/app_rna_core/cartridge/client/default/js/modules/module.address-autocomplete.js":
/*!****************************************************************************************************!*\
  !*** ./cartridges/app_rna_core/cartridge/client/default/js/modules/module.address-autocomplete.js ***!
  \****************************************************************************************************/
/*! exports provided: APIConfig, mapsCountryCode, defaults, regionConfigs, init, setupAddressAutocomplete, setAddress, getMatchingFields, clearForm, getRegionConfiguration, getConfiguration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"APIConfig\", function() { return APIConfig; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapsCountryCode\", function() { return mapsCountryCode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaults\", function() { return defaults; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"regionConfigs\", function() { return regionConfigs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"init\", function() { return init; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setupAddressAutocomplete\", function() { return setupAddressAutocomplete; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setAddress\", function() { return setAddress; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMatchingFields\", function() { return getMatchingFields; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearForm\", function() { return clearForm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRegionConfiguration\", function() { return getRegionConfiguration; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getConfiguration\", function() { return getConfiguration; });\n/* harmony import */ var load_google_maps_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! load-google-maps-api */ \"./node_modules/load-google-maps-api/index.js\");\n/* harmony import */ var load_google_maps_api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(load_google_maps_api__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @borngroup/born-utilities */ \"./node_modules/@borngroup/born-utilities/dist/born-utilities.min.js\");\n/* harmony import */ var _borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _helpers_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/utilities */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/helpers/utilities.js\");\n\n\n\n\n\nvar APIConfig = {\n  key: window.SFRA.SitePreferences.mapsAPIKey,\n  libraries: ['places']\n},\n    mapsCountryCode = window.SFRA.SitePreferences.countryCodeForMapsAPI || 'US',\n    defaults = {\n  componentForm: {\n    '_address1': {\n      format: '{0} {1} {2}',\n      placeProperty: 'name',\n      types: ['street_number', 'route', 'administrative_area_level_2']\n    },\n    '_cityCode': {\n      types: ['locality']\n    },\n    '_countryCode': {\n      types: ['country']\n    },\n    '_stateCode': {\n      types: ['administrative_area_level_1']\n    },\n    '_postalCode': {\n      types: ['postal_code']\n    }\n  },\n  componentRestrictions: {\n    country: [mapsCountryCode]\n  }\n},\n    regionConfigs = {\n  'AE': {\n    componentForm: {\n      '_cityCode': {\n        format: '{0}',\n        types: ['sublocality_level_1', 'locality']\n      }\n    }\n  },\n  'US': {\n    componentForm: {\n      '_cityCode': {\n        format: '{0}',\n        types: ['sublocality_level_1', 'locality']\n      }\n    }\n  }\n};\n/**\n * Waits for the Maps API is to be loaded and ready before attempting to use it.\n */\n\nfunction init(options) {\n  load_google_maps_api__WEBPACK_IMPORTED_MODULE_0___default()(APIConfig).then(function (mapsAPI) {\n    Object(_borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_1__[\"callbackOnElements\"])(options.elements, setupAddressAutocomplete.bind(this, mapsAPI, options));\n  });\n}\n/**\n * Initializes the Maps API and attaches a change listener that fires whenever a new address is selected.\n */\n\nfunction setupAddressAutocomplete(mapsAPI, options, addressEl) {\n  var config = getConfiguration(options, defaults, addressEl);\n  config.componentForm = getRegionConfiguration(config);\n  config.addressEl = addressEl;\n  config.searchFieldEl = addressEl.querySelector(config.searchField);\n  config.searchFieldEl.addEventListener('keydown', function (e) {\n    if (e.keyCode == 13) {\n      e.preventDefault();\n    }\n  });\n  config.autocomplete = new mapsAPI.places.Autocomplete(config.searchFieldEl, {\n    componentRestrictions: config.componentRestrictions\n  }); //Set specific field boundaries to prevent additional charges$$$\n\n  config.autocomplete.setFields(['address_component', 'name', 'geometry']);\n  config.autocomplete.addListener('place_changed', setAddress.bind(this, config));\n}\n/**\n * Places the address values in the form fields.\n */\n\nfunction setAddress(config) {\n  var placeObject = config.autocomplete.getPlace(); //Do not keep the previous field values when selecting a new address.\n\n  clearForm(config); // Get coordinates and save to container\n\n  if (placeObject.geometry && placeObject.geometry.location) {\n    var shippingMethodList = document.querySelector('[data-checkout-component=\"shipping-method-list\"]');\n\n    if (shippingMethodList) {\n      shippingMethodList.setAttribute('data-address-lat', placeObject.geometry.location.lat());\n      shippingMethodList.setAttribute('data-address-lng', placeObject.geometry.location.lng());\n    }\n  }\n\n  if (placeObject && placeObject.address_components && placeObject.address_components.length) {\n    var _loop = function _loop(fieldName) {\n      var fieldTypes = config.componentForm[fieldName].types,\n          fieldFormat = config.componentForm[fieldName].format,\n          //Specify a specific property out of the `placeObject`.\n      //If property is available, use that and ignore the formatting options.\n      placePropertyName = config.componentForm[fieldName].placeProperty,\n          placePropertyValue = placePropertyName && placeObject[placePropertyName] ? placeObject[placePropertyName] : null,\n          matchingValues = []; //Then, loop through the `types` definitions for each field item.\n      //These `types` define which components from the Maps API response should be attached to the field.\n\n      fieldTypes.forEach(function (currentType) {\n        //In this final loop, try to match which of the desired field `types` can be found within the Map API `address_components`.\n        placeObject.address_components.forEach(function (currentComponent) {\n          if (currentComponent.types.indexOf(currentType) !== -1) {\n            matchingValues.push(currentComponent.short_name);\n          }\n        });\n      }); //Fill in the `matchingValues` array with blanks to match the length of `fieldTypes`.\n      //This is necessary in case the current field has a `format` string and there aren't enough values stored in `matchingValues`,\n      //preventing rendering an unformatted string.\n\n      if (fieldFormat && matchingValues.length < fieldTypes.length) {\n        fieldTypes.forEach(function (currentType, index) {\n          return matchingValues[index] = !matchingValues[index] ? '' : matchingValues[index];\n        });\n      }\n\n      if (matchingValues.length) {\n        [].forEach.call(getMatchingFields(config, fieldName), function (currentEl) {\n          var fieldValue = placePropertyValue || (fieldFormat ? fieldFormat.format.apply(fieldFormat, matchingValues) : matchingValues.join(' ')); //Test for special fields where the values might not directly match the field's value, but another attribute within itself.\n\n          if (currentEl.hasAttribute('data-autocomplete-custom') && currentEl.tagName === 'SELECT') {\n            var matchProperty = currentEl.getAttribute('data-autocomplete-custom') || 'textContent';\n\n            for (var i = 0; i < currentEl.options.length; i++) {\n              if (currentEl.options[i][matchProperty] === fieldValue) {\n                fieldValue = currentEl.options[i].value;\n                break;\n              }\n            }\n          }\n\n          currentEl.value = fieldValue;\n          Object(_helpers_utilities__WEBPACK_IMPORTED_MODULE_2__[\"publishEvent\"])('external', 'change', currentEl);\n        });\n      }\n    };\n\n    //First, loop through the field map list from `config.componentForm`.\n    for (var fieldName in config.componentForm) {\n      _loop(fieldName);\n    }\n  }\n}\nfunction getMatchingFields(config, fieldName) {\n  return config.addressEl.querySelectorAll(\"[name*=\\\"\".concat(fieldName, \"\\\"]\"));\n}\n/**\n * Reset the specified field names.\n */\n\nfunction clearForm(config) {\n  for (var component in config.componentForm) {\n    var matchingFields = getMatchingFields(config, component);\n    [].forEach.call(matchingFields, function (currentEl) {\n      return currentEl.value = '';\n    });\n  }\n}\n/**\n * Merge componentForm objects in case there are region-specific configurations.\n */\n\nfunction getRegionConfiguration(config) {\n  if (regionConfigs[mapsCountryCode] && regionConfigs[mapsCountryCode].componentForm) {\n    return Object(_borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_1__[\"objectAssign\"])({}, config.componentForm, regionConfigs[mapsCountryCode].componentForm);\n  }\n\n  return config.componentForm;\n}\n/**\n * Merges the configuration objects from the provided `options`, with those set in the current `data-address-autocomplete` element, and the default settings.\n */\n\nfunction getConfiguration(options, defaults, currentEl) {\n  var elConfigString = currentEl.getAttribute('data-address-autocomplete'),\n      elConfigObject = elConfigString ? JSON.parse(elConfigString) : {};\n  return Object(_borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_1__[\"objectAssign\"])({}, defaults, options, elConfigObject);\n}\n\n//# sourceURL=webpack:///./cartridges/app_rna_core/cartridge/client/default/js/modules/module.address-autocomplete.js?");

/***/ }),

/***/ "./node_modules/load-google-maps-api/index.js":
/*!****************************************************!*\
  !*** ./node_modules/load-google-maps-api/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var CALLBACK_NAME = '__googleMapsApiOnLoadCallback'\n\nvar OPTIONS_KEYS = ['channel', 'client', 'key', 'language', 'region', 'v']\n\nvar promise = null\n\nmodule.exports = function (options) {\n  options = options || {}\n\n  if (!promise) {\n    promise = new Promise(function (resolve, reject) {\n      // Reject the promise after a timeout\n      var timeoutId = setTimeout(function () {\n        window[CALLBACK_NAME] = function () {} // Set the on load callback to a no-op\n        reject(new Error('Could not load the Google Maps API'))\n      }, options.timeout || 10000)\n\n      // Hook up the on load callback\n      window[CALLBACK_NAME] = function () {\n        if (timeoutId !== null) {\n          clearTimeout(timeoutId)\n        }\n        resolve(window.google.maps)\n        delete window[CALLBACK_NAME]\n      }\n\n      // Prepare the `script` tag to be inserted into the page\n      var scriptElement = document.createElement('script')\n      var params = ['callback=' + CALLBACK_NAME]\n      OPTIONS_KEYS.forEach(function (key) {\n        if (options[key]) {\n          params.push(key + '=' + options[key])\n        }\n      })\n      if (options.libraries && options.libraries.length) {\n        params.push('libraries=' + options.libraries.join(','))\n      }\n      scriptElement.src =\n        'https://maps.googleapis.com/maps/api/js?' + params.join('&')\n\n      // Insert the `script` tag\n      document.body.appendChild(scriptElement)\n    })\n  }\n\n  return promise\n}\n\n\n//# sourceURL=webpack:///./node_modules/load-google-maps-api/index.js?");

/***/ })

}]);