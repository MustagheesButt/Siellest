(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["page-address~page-checkout"],{

/***/ "./cartridges/app_accelerator_core/cartridge/client/default/js/checkout/address.js":
/*!*****************************************************************************************!*\
  !*** ./cartridges/app_accelerator_core/cartridge/client/default/js/checkout/address.js ***!
  \*****************************************************************************************/
/*! exports provided: updateAddressMode, getShipmentUUIDEls, addressSelectHandler, updateAddressSelector, selectNewAddress, optionValueForAddress, requestAddressInputUpdate, init */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateAddressMode\", function() { return updateAddressMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getShipmentUUIDEls\", function() { return getShipmentUUIDEls; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addressSelectHandler\", function() { return addressSelectHandler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateAddressSelector\", function() { return updateAddressSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selectNewAddress\", function() { return selectNewAddress; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"optionValueForAddress\", function() { return optionValueForAddress; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"requestAddressInputUpdate\", function() { return requestAddressInputUpdate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"init\", function() { return init; });\n/* harmony import */ var _helpers_addressUtilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/addressUtilities */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/helpers/addressUtilities.js\");\n/* harmony import */ var _borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @borngroup/born-utilities */ \"./node_modules/@borngroup/born-utilities/dist/born-utilities.min.js\");\n/* harmony import */ var _borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _shippingHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shippingHelpers */ \"./cartridges/app_rna_core/cartridge/client/default/js/checkout/shippingHelpers.js\");\n/* harmony import */ var _components_clientSideValidation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/clientSideValidation */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/components/clientSideValidation.js\");\n/* harmony import */ var _helpers_utilities__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/utilities */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/helpers/utilities.js\");\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\n\n\n\n/**\n * Supported `addressMode` values:\n  –\"new\": User selected to add a new address, form fields are cleared. Address fields are shown.\n  –\"details\": User selected to update an existing address. Address fields are shown with pre-filled data.\n  –\"edit\": Default state if addresses are available. Edit or Update options are shown. Address fields are hidden.\n  –\"shipment\": User selected to use an address previously used in a shipment on the current session (not necessarily saved to the account). Address fields are hidden.\n  –\"customer\": User selected to use an address saved to their account. Address fields are hidden.\n\n * @param  {[type]} formEl [description]\n * @param  {[type]} addressMode   [description]\n * @return {[type]}        [description]\n */\n\nfunction updateAddressMode(formEl) {\n  var addressMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'new';\n  formEl.setAttribute('data-address-mode', addressMode);\n}\n/**\n * Returns a NodeList of matching shipmentUUID input elements found in the current page.\n * @param  {[type]} UUID [description]\n * @return {[type]}      [description]\n */\n\nfunction getShipmentUUIDEls(UUID) {\n  return document.querySelectorAll(\"[name=\\\"shipmentUUID\\\"][value=\\\"\".concat(UUID, \"\\\"]\"));\n}\n/**\n * Address select event handler on shipping and billing (and maybe others).\n * @param  {[type]}   inputEl [description]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\n\nfunction addressSelectHandler(inputEl, callback) {\n  var selectedOption = inputEl.options ? inputEl.options[inputEl.selectedIndex] : inputEl,\n      selectedOptionType = selectedOption.getAttribute('data-address-type'),\n      selectedOptionData = selectedOption.dataset; //Update the current view so that fields are either displayed or hidden, depending on the option selected.\n\n  updateAddressMode(inputEl.form, selectedOptionType); //Update the form with the values set in the selected option `selectedOptionData`\n\n  Object(_helpers_addressUtilities__WEBPACK_IMPORTED_MODULE_0__[\"populateAddressFields\"])(inputEl.form, selectedOptionData);\n\n  if (typeof callback === 'function') {\n    callback(inputEl.form, selectedOptionData);\n  }\n}\nfunction updateAddressSelector(order, customer, stageData, formEl, options) {\n  var addressSelector = formEl ? formEl.querySelector('[data-checkout-component*=\"address-selector\"]') : false,\n      isBillingForm = options.formType === 'billing',\n      enableMultiAddress = !window.SFRA.SitePreferences.disableMultiAddress,\n      hasCustomBillingAddress = isBillingForm && !stageData.matchingAddressId && stageData.billingAddress.address && stageData.billingAddress.address.address1 != null && stageData.billingAddress.address.countryCode && stageData.billingAddress.address.countryCode != '',\n      hasSelectedAddress = false,\n      shipmentAddressCount = 0;\n\n  if (addressSelector) {\n    var newAddressData = {\n      countryCode: window.SFRA.Constants.LOCALE_COUNTRY\n    };\n\n    if (customer.profile) {\n      newAddressData.firstName = customer.profile.firstName;\n      newAddressData.lastName = customer.profile.lastName;\n    }\n\n    addressSelector.textContent = ''; //Add New Address option\n    //Skip these if user should not be able to add multiple addresses.\n\n    if (enableMultiAddress) {\n      optionValueForAddress(newAddressData, order, addressSelector, {\n        formType: options.formType,\n        addressType: 'new'\n      });\n    }\n\n    if (options.formType === 'billing' && !order.billing.matchingAddressId && hasCustomBillingAddress) {\n      var manualAddressData = {\n        UUID: 'manual-entry',\n        shippingAddress: order.billing.billingAddress.address || {}\n      };\n      optionValueForAddress(manualAddressData, order, addressSelector, {\n        formType: options.formType,\n        addressType: 'manual-entry',\n        isSelected: true\n      });\n    } //Shipping addresses\n    //Skip these if user should not be able to add multiple addresses.\n\n\n    if (enableMultiAddress) {\n      order.shipping.forEach(function (currentShipping) {\n        var hasShipmentAddress = currentShipping.shippingAddress && Object.keys(currentShipping.shippingAddress).length;\n\n        if (hasShipmentAddress && !currentShipping.selectedShippingMethod.storePickupEnabled) {\n          var isSelected = (stageData.matchingAddressId || stageData.UUID) === currentShipping.UUID;\n\n          if (shipmentAddressCount === 0) {\n            // Option Separator -\n            optionValueForAddress(order.resources.shippingAddresses, order, addressSelector, {\n              formType: options.formType\n            });\n          }\n\n          optionValueForAddress(currentShipping, order, addressSelector, {\n            formType: options.formType,\n            addressType: 'shipment',\n            isSelected: isSelected\n          });\n          hasSelectedAddress = hasSelectedAddress || isSelected;\n          shipmentAddressCount++;\n        }\n      });\n    } //Customer addresses.\n    //Skip these if the user has provided a custom address AND if user should not be able to add multiple addresses.\n\n\n    if ((enableMultiAddress || !hasCustomBillingAddress) && customer.addresses && customer.addresses.length) {\n      //Option separator -\n      optionValueForAddress(order.resources.accountAddresses, order, addressSelector);\n      customer.addresses.forEach(function (address) {\n        var isSelected = stageData.matchingAddressId === address.ID;\n        hasSelectedAddress = hasSelectedAddress || isSelected; // Customer Address option\n\n        optionValueForAddress({\n          UUID: 'ab_' + address.ID,\n          shippingAddress: address\n        }, order, addressSelector, {\n          formType: options.formType,\n          addressType: 'customer',\n          isSelected: isSelected\n        });\n      });\n    }\n  }\n\n  if (formEl && isBillingForm) {\n    updateAddressMode(formEl, hasSelectedAddress || hasCustomBillingAddress ? 'edit' : 'new');\n  }\n}\n/**\n * Sets the address selector element to \"new\" and resets the address form fields.\n */\n\nfunction selectNewAddress(formEl) {\n  var addressSelector = formEl ? formEl.querySelector('[data-checkout-component*=\"address-selector\"]') : false;\n\n  if (addressSelector) {\n    addressSelector.selectedIndex = 0;\n    addressSelectHandler(addressSelector, addressSelector.matches('[data-checkout-component*=\"shipping\"]') ? _shippingHelpers__WEBPACK_IMPORTED_MODULE_2__[\"handleShippingMethodListUpdate\"] : null);\n  }\n}\n/**\n * returns a formed <option /> element\n * @param {Object} shipping - the shipping object (shipment model)\n * @param {boolean} selected - current shipping is selected (for PLI)\n * @param {order} order - the Order model\n * @param {Object} [options] - options\n * @returns {Object} - the jQuery / DOMElement\n */\n\nfunction optionValueForAddress(shipping, order, selectEl) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var isBilling = options.formType === 'billing',\n      isNew = !options.addressType || options.addressType === 'new',\n      optionEl = Object(_borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_1__[\"createElWithAttrs\"])(selectEl, {}, 'option'),\n      keyMap = {\n    'data-salutation': 'salutation',\n    'data-first-name': 'firstName',\n    'data-last-name': 'lastName',\n    'data-custom-first-name': 'customFirstName',\n    'data-custom-last-name': 'customLastName',\n    'data-address1': 'address1',\n    'data-address2': 'address2',\n    'data-city': 'city',\n    'data-state-code': 'stateCode',\n    'data-postal-code': 'postalCode',\n    'data-tax-code': 'taxCode',\n    'data-country-code': 'countryCode',\n    'data-phone': 'phone'\n  };\n\n  if (options.multiShipping) {\n    optionEl.setAttribute('data-multi-shipping', true);\n  } //Separator string\n\n\n  if (typeof shipping === 'string') {\n    optionEl.textContent = shipping;\n    optionEl.disabled = true;\n    return optionEl;\n  }\n\n  shipping = shipping || {};\n  shipping.shippingAddress = shipping.shippingAddress || {};\n  shipping.UUID = shipping.UUID || 'new';\n  shipping.shippingAddress = Object(_borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_1__[\"objectAssign\"])({}, shipping.shippingAddress, Object(_helpers_addressUtilities__WEBPACK_IMPORTED_MODULE_0__[\"getSalutationData\"])(shipping.shippingAddress));\n  optionEl.value = shipping.UUID;\n  optionEl.textContent = isNew ? order.resources.addNewAddress : _constructAddressOptionLabel(shipping.shippingAddress, shipping.selectedShippingMethod, isBilling);\n\n  for (var key in keyMap) {\n    var mappedKey = keyMap[key],\n        mappedValue = shipping.shippingAddress[mappedKey] || shipping[mappedKey]; // In case of country code and others\n\n    if (mappedValue && _typeof(mappedValue) === 'object') {\n      mappedValue = mappedValue.value;\n    }\n\n    optionEl.setAttribute(key, mappedValue || '');\n  }\n\n  if (options.isSelected) {\n    optionEl.setAttribute('selected', true);\n  }\n\n  optionEl.setAttribute('data-address-type', options.addressType);\n  return optionEl;\n}\n/**\n * Returns a formatted string with the applicable first/last names for a given addressObj.\n */\n\nfunction _getEffectiveCustomerNames(addressObj) {\n  var firstName = addressObj.firstName || '',\n      lastName = addressObj.lastName || '';\n\n  if (addressObj.useCustomNames) {\n    firstName = addressObj.customFirstName || firstName;\n    lastName = addressObj.customLastName || lastName;\n  }\n\n  return \"\".concat(firstName, \" \").concat(lastName);\n}\n\nfunction _constructAddressOptionLabel(addressObj, shippingMethod, isBilling) {\n  return \"\".concat(addressObj.salutation.displayValue || '', \" \").concat(_getEffectiveCustomerNames(addressObj), \" \").concat(addressObj.address1 || '', \" \").concat(addressObj.address2 || '', \" \").concat(addressObj.city || '', \" \").concat(addressObj.stateCode || '', \" \").concat(addressObj.postalCode || '', \" \").concat(!isBilling && shippingMethod ? ' - ' + shippingMethod.displayName : '');\n}\n/**\n * Returns a simple `option` element string with a value and a label.\n */\n\n\nfunction _constructOption(value, label) {\n  return \"<option value=\\\"\".concat(value, \"\\\">\").concat(label, \"</option>\");\n}\n/**\n * Takes an Array and appends one or more `option` elements within a given `targetInput` DOM Node.\n */\n\n\nfunction _renderOptionsFromList(list, targetInput) {\n  list.forEach(function (currentOption) {\n    targetInput.insertAdjacentHTML('beforeend', _constructOption(currentOption, currentOption));\n  });\n}\n/**\n * Returns a server request to update the list of options that go into a provided `targetInput` DOM Node.\n */\n\n\nfunction requestAddressInputUpdate(codeFilter, URL, targetInput) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return $.ajax({\n    url: URL,\n    method: 'GET',\n    dataType: 'json',\n    data: {\n      codeFilter: codeFilter\n    },\n    success: function success(response) {\n      targetInput.textContent = '';\n\n      if (options.target) {\n        targetInput.insertAdjacentHTML('afterbegin', _constructOption('', options.defaultOption ? window.SFRA.Resources.dynamicAddress.defaultOptions[options.target] : ''));\n      }\n\n      if (response.cities && response.cities.length) {\n        _renderOptionsFromList(response.cities[0].cities, targetInput);\n      } else if (response.postalCodes && response.postalCodes.length) {\n        _renderOptionsFromList(response.postalCodes[0].postalcodes, targetInput);\n      } //Signal the custom dropdown to update the label positioning.\n\n\n      Object(_helpers_utilities__WEBPACK_IMPORTED_MODULE_4__[\"publishEvent\"])('external', 'change', targetInput, {\n        skipValidation: true\n      });\n    }\n  });\n}\nvar init = {\n  showDetails: function showDetails() {\n    $('[data-checkout-component=\"address-action-update\"]').on('click', function () {\n      updateAddressMode(this.form, 'details'); //Require approval by FED and to be moved to appropriate place\n\n      var billingTaxField = $('#dwfrm_billing')[0].querySelector('input[name$=_taxCode]');\n\n      if (billingTaxField) {\n        billingTaxField.value = $('#billingAddressSelector :selected').attr('data-tax-code');\n      }\n    });\n  },\n  addNewAddress: function addNewAddress() {\n    $('[data-checkout-component=\"address-action-new\"]').on('click', function () {\n      var cityField = this.form.querySelector('select[name$=_cityCode], input[name$=_cityCode]');\n      selectNewAddress(this.form);\n      Object(_components_clientSideValidation__WEBPACK_IMPORTED_MODULE_3__[\"clearValidity\"])(cityField);\n    });\n  },\n  onDynamicAddressInputChange: function onDynamicAddressInputChange() {\n    Object(_borngroup_born_utilities__WEBPACK_IMPORTED_MODULE_1__[\"callbackOnElements\"])('[data-dynamic-address]', function (currentInput) {\n      var inputConfig = JSON.parse(currentInput.getAttribute('data-dynamic-address')),\n          targetInput = currentInput.form.querySelector(\"[data-dynamic-address-component=\\\"\".concat(inputConfig.target, \"\\\"]\"));\n      $(currentInput).on('change', function () {\n        requestAddressInputUpdate(this.value, window.SFRA.Urls.dynamicAddress[inputConfig.target], targetInput, inputConfig);\n      });\n    });\n  }\n};\n\n//# sourceURL=webpack:///./cartridges/app_accelerator_core/cartridge/client/default/js/checkout/address.js?");

/***/ }),

/***/ "./cartridges/app_accelerator_core/cartridge/client/default/js/checkout/checkoutHelpers.js":
/*!*************************************************************************************************!*\
  !*** ./cartridges/app_accelerator_core/cartridge/client/default/js/checkout/checkoutHelpers.js ***!
  \*************************************************************************************************/
/*! exports provided: triggerUpdateCheckoutView, toggleCheckoutState, clearCheckoutErrors, checkoutFormResponseHandler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"triggerUpdateCheckoutView\", function() { return triggerUpdateCheckoutView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toggleCheckoutState\", function() { return toggleCheckoutState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearCheckoutErrors\", function() { return clearCheckoutErrors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkoutFormResponseHandler\", function() { return checkoutFormResponseHandler; });\n/* harmony import */ var _address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/checkout/address.js\");\n/* harmony import */ var _helpers_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/utilities */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/helpers/utilities.js\");\n/* harmony import */ var _components_clientSideValidation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/clientSideValidation */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/components/clientSideValidation.js\");\n\n\n\n\n\n/**\n * Single access point to call the `'checkout:updateCheckoutView'` trigger.\n */\n\nfunction triggerUpdateCheckoutView(response, options) {\n  var checkoutMain = document.querySelector('[data-stage]');\n  $('body').trigger('checkout:updateCheckoutView', Object.assign({\n    container: checkoutMain,\n    currentStage: checkoutMain.getAttribute('data-current-stage'),\n    options: options\n  }, response));\n}\n/**\n * Toggles the current checkout stage's state.\n * When `status.disable` is TRUE, the \"proceed next\" action is disabled, and an error is displayed.\n * A custom message may be provided in the `message` paramater.\n */\n\nfunction toggleCheckoutState() {\n  var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var message = arguments.length > 1 ? arguments[1] : undefined;\n  var checkoutMain = document.querySelector('[data-stage]'),\n      currentStage = checkoutMain.getAttribute('data-current-stage'),\n      currentAction = checkoutMain.querySelector(\"[data-checkout-component=\\\"\".concat(currentStage, \"-stage-next\\\"]\"));\n  status.disable && message ? Object(_helpers_utilities__WEBPACK_IMPORTED_MODULE_1__[\"createErrorNotification\"])(typeof message === 'string' ? message : window.SFRA.Resources.serviceDownMessage) : clearCheckoutErrors();\n\n  if (currentAction) {\n    currentAction.disabled = status.disable;\n\n    if (status.hide) {\n      currentAction.classList.add('hidden');\n    } else {\n      currentAction.classList.remove('hidden');\n    }\n  }\n}\n/**\n * Empties the checkout error list.\n */\n\nfunction clearCheckoutErrors() {\n  var containerEl = document.querySelector('[data-checkout-component=\"error-container\"]');\n  containerEl.textContent = '';\n}\n/**\n * Handle response from the server for valid or invalid form fields.\n * @param {Object} response - the response data with the invalid form fields or\n *  valid model data.\n * @param {Object} options -\n *                         deferredStage: the deferred object which will resolve on success or reject.\n *                         currentStage,\n *                         errorCallback\n *                         successCallback\n */\n\nfunction checkoutFormResponseHandler(formEl, response) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (response.error) {\n    if (response.fieldErrors && response.fieldErrors.length) {\n      // highlight fields with errors\n      _components_clientSideValidation__WEBPACK_IMPORTED_MODULE_2__[\"setCustomErrors\"](formEl, response.fieldErrors);\n      Object(_address__WEBPACK_IMPORTED_MODULE_0__[\"updateAddressMode\"])(formEl, 'details');\n    }\n\n    if (response.serverErrors && response.serverErrors.length) {\n      response.serverErrors.forEach(function (currentError) {\n        return Object(_helpers_utilities__WEBPACK_IMPORTED_MODULE_1__[\"createErrorNotification\"])(currentError);\n      });\n    }\n\n    if (response.cartError) {\n      window.location.href = response.redirectUrl;\n    }\n\n    if (typeof options.errorCallback === 'function') {\n      options.errorCallback(formEl, response);\n    }\n\n    if (options.deferredStage) {\n      options.deferredStage.reject(response);\n    }\n  } else {\n    triggerUpdateCheckoutView(response, options);\n\n    if (typeof options.successCallback === 'function') {\n      options.successCallback(formEl, response);\n    }\n\n    if (options.deferredStage) {\n      options.deferredStage.resolve(response);\n    }\n  }\n}\n\n//# sourceURL=webpack:///./cartridges/app_accelerator_core/cartridge/client/default/js/checkout/checkoutHelpers.js?");

/***/ }),

/***/ "./cartridges/app_rna_core/cartridge/client/default/js/checkout/shippingHelpers.js":
/*!*****************************************************************************************!*\
  !*** ./cartridges/app_rna_core/cartridge/client/default/js/checkout/shippingHelpers.js ***!
  \*****************************************************************************************/
/*! exports provided: updateShippingAddressSelector, updateShippingAddressFormValues, updateShippingMethods, handleShippingMethodListUpdate, handleShippingMethodSelection, updateShippingInformation, requestShippingViewUpdate, updateProductLineItemShipmentUUIDs, getFormattedDate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateShippingAddressSelector\", function() { return updateShippingAddressSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateShippingAddressFormValues\", function() { return updateShippingAddressFormValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateShippingMethods\", function() { return updateShippingMethods; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"handleShippingMethodListUpdate\", function() { return handleShippingMethodListUpdate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"handleShippingMethodSelection\", function() { return handleShippingMethodSelection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateShippingInformation\", function() { return updateShippingInformation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"requestShippingViewUpdate\", function() { return requestShippingViewUpdate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateProductLineItemShipmentUUIDs\", function() { return updateProductLineItemShipmentUUIDs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFormattedDate\", function() { return getFormattedDate; });\n/* harmony import */ var _components_progress__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/progress */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/components/progress.js\");\n/* harmony import */ var _address__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./address */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/checkout/address.js\");\n/* harmony import */ var _helpers_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/utilities */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/helpers/utilities.js\");\n/* harmony import */ var _helpers_addressUtilities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/addressUtilities */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/helpers/addressUtilities.js\");\n/* harmony import */ var _checkoutHelpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./checkoutHelpers */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/checkout/checkoutHelpers.js\");\n/* harmony import */ var _summaryHelpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./summaryHelpers */ \"./cartridges/app_accelerator_core/cartridge/client/default/js/checkout/summaryHelpers.js\");\n\n\n\n\n\n\n\n\n/**\n * updates the shipping address selector within shipping forms\n * @param {Object} productLineItem - the productLineItem model\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order model\n * @param {Object} customer - the customer model\n */\n\nfunction updateShippingAddressSelector(productLineItem, shipping, order, customer) {\n  var UUIDEl = document.querySelector(\"input[value=\\\"\".concat(productLineItem.UUID, \"\\\"]\")),\n      formEl = UUIDEl ? UUIDEl.form : false;\n  _address__WEBPACK_IMPORTED_MODULE_1__[\"updateAddressSelector\"](order, customer, shipping, formEl, {\n    formType: 'shipping'\n  });\n  $('body').trigger('shipping:updateShippingAddressSelector', {\n    productLineItem: productLineItem,\n    shipping: shipping,\n    order: order,\n    customer: customer\n  });\n}\n/**\n * updates the shipping address form values within shipping forms\n * @param {Object} shipping - the shipping (shipment model) model\n */\n\nfunction updateShippingAddressFormValues(shipping) {\n  var addressObject = Object(_helpers_utilities__WEBPACK_IMPORTED_MODULE_2__[\"objectAssign\"])({}, shipping.shippingAddress);\n  [].forEach.call(_address__WEBPACK_IMPORTED_MODULE_1__[\"getShipmentUUIDEls\"](shipping.UUID), function (currentEl) {\n    if (currentEl.form) {\n      Object(_helpers_addressUtilities__WEBPACK_IMPORTED_MODULE_3__[\"populateAddressFields\"])(currentEl.form, addressObject);\n    }\n  });\n}\n/**\n * updates the shipping method radio buttons within shipping forms\n * @param {Object} shipping - the shipping (shipment model) model\n */\n\nfunction updateShippingMethods(shipping) {\n  var hasSelectableShippingMethods = false;\n  [].forEach.call(_address__WEBPACK_IMPORTED_MODULE_1__[\"getShipmentUUIDEls\"](shipping.UUID), function (currentEl) {\n    if (currentEl.form) {\n      var shippingMethodList = currentEl.form.querySelector('[data-checkout-component=\"shipping-method-list\"]');\n\n      if (shippingMethodList) {\n        var shippingMethods = shipping.applicableShippingMethods,\n            selectedMethod = shipping.selectedShippingMethod || {},\n            isMultiShipping = currentEl.form.getAttribute('data-checkout-component') === 'multi-shipping-form',\n            shippingMethodFormID = \"\".concat(currentEl.form.name, \"_shippingAddress_shippingMethodID\");\n        shippingMethodList.textContent = ''; // Create the new rows for each shipping method\n\n        shippingMethods.forEach(function (currentMethod) {\n          var methodTemplate = document.querySelector('[data-checkout-component=\"shipping-method-template\"]').cloneNode(true),\n              methodField = methodTemplate.querySelector('[data-checkout-component=\"shipping-method-check\"]'),\n              methodEstimate = methodTemplate.querySelector('[data-checkout-component=\"shipping-method-estimate\"]'),\n              methodEta = methodTemplate.querySelector('[data-checkout-component=\"shipping-method-eta\"]'),\n              methodEtaDate = methodTemplate.querySelector('[data-checkout-component=\"shipping-method-eta-date\"]');\n          methodField.id = \"shippingMethod-\".concat(currentMethod.ID, \"-\").concat(shipping.UUID, \"-\").concat(isMultiShipping ? 'multi' : 'single');\n          methodField.name = shippingMethodFormID;\n          methodField.value = currentMethod.ID;\n\n          if (currentMethod.storePickupEnabled) {\n            var methodRow = methodTemplate.querySelector('.shipping-method__item'); // Hide store pickup since it will be toggled separately\n\n            if (methodRow) {\n              methodRow.classList.add('hidden');\n            }\n\n            methodField.setAttribute('data-pickup', true);\n          } // Set as attribute because the `checked` property does not update the DOM\n          // element\n\n\n          if (currentMethod.ID === selectedMethod.ID && !currentMethod.disable) {\n            methodField.setAttribute('checked', true);\n          } // Update the `hasSelectableShippingMethods` flag if there's at least one\n          // shipping method that can be selected\n\n\n          if (!currentMethod.disable) {\n            hasSelectableShippingMethods = true;\n          }\n\n          methodField.disabled = currentMethod.disable; // Toggle arrival time\n\n          if (methodEstimate && currentMethod.estimatedArrivalTime) {\n            methodEstimate.textContent = currentMethod.estimatedArrivalTime;\n            methodEstimate.classList.remove('hidden');\n          } // Toggle delivery ETA\n\n\n          if (methodEta && methodEtaDate && currentMethod.etaFluent) {\n            methodEtaDate.textContent = currentMethod.etaFluent;\n            methodEta.classList.remove('hidden');\n          }\n\n          methodTemplate.querySelector('[data-checkout-component=\"shipping-method-name\"]').textContent = currentMethod.displayName;\n          methodTemplate.querySelector('[data-checkout-component=\"shipping-method-cost\"]').textContent = currentMethod.shippingCost;\n          methodTemplate.querySelector('[data-checkout-component=\"shipping-method-label\"]').setAttribute('for', methodField.id);\n          shippingMethodList.insertAdjacentHTML('beforeend', methodTemplate.innerHTML);\n        });\n      }\n    }\n  }); // If there are no selectable shipping methods, disable checkout and display an error message\n\n  Object(_checkoutHelpers__WEBPACK_IMPORTED_MODULE_4__[\"toggleCheckoutState\"])({\n    disable: !hasSelectableShippingMethods\n  }, true);\n  $('body').trigger('shipping:updateShippingMethods', {\n    shipping: shipping\n  });\n}\n/**\n * Prepares a request to update the shipping method list and checkout view.\n * This typically happens after the shipping address changes.\n */\n\nfunction handleShippingMethodListUpdate(shippingForm) {\n  var shippingMethodList = shippingForm.querySelector('[data-checkout-component=\"shipping-method-list\"]'),\n      url = shippingMethodList.getAttribute('data-action-url'),\n      options = {\n    lat: shippingMethodList.getAttribute('data-address-lat') || '',\n    lng: shippingMethodList.getAttribute('data-address-lng') || ''\n  };\n  return requestShippingViewUpdate(shippingForm, url, options, shippingMethodList);\n}\n/**\n * Prepares a request to update the checkout view after a shipping method is selected.\n */\n\nfunction handleShippingMethodSelection() {\n  return requestShippingViewUpdate(this.closest('form'), this.getAttribute('data-select-shipping-method-url'), {\n    methodID: this.querySelector(':checked').value\n  });\n}\n/**\n * Update the shipping UI for a single shipping info (shipment model)\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order/basket model\n * @param {Object} customer - the customer model\n * @param {Object} [options] - options for updating PLI summary info\n * @param {Object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'\n */\n\nfunction updateShippingInformation(shipping, order, customer, options) {\n  //Update the PLI-based summary information as well\n  shipping.productLineItems.items.forEach(function (productLineItem) {\n    //Copy over shipmentUUIDs from response, to each PLI form.\n    updateProductLineItemShipmentUUIDs(productLineItem, shipping);\n    updateShippingAddressSelector(productLineItem, shipping, order, customer);\n    Object(_summaryHelpers__WEBPACK_IMPORTED_MODULE_5__[\"updateShippingSummaryPLI\"])(productLineItem, shipping, order, options);\n  }); //Update shipping information, based on those associations\n\n  updateShippingMethods(shipping);\n  Object(_summaryHelpers__WEBPACK_IMPORTED_MODULE_5__[\"updateShippingSummaryList\"])(shipping, order);\n  $('body').trigger('shipping:updateShippingInformation', {\n    order: order,\n    shipping: shipping,\n    customer: customer,\n    options: options\n  });\n}\n/**\n * THIS METHOD IS CALLED TOO MANY TIMES, REQUIRES REVIEW.\n * Starts a request for shipping-view-related updates, whenever a shipping method is selected.\n * @param {string} url - string representation of endpoint URL\n * @param {Object} urlParams - url params\n */\n\nfunction requestShippingViewUpdate(currentForm, url) {\n  var customUrlParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var loaderTarget = arguments.length > 3 ? arguments[3] : undefined;\n  var urlParams = Object(_helpers_addressUtilities__WEBPACK_IMPORTED_MODULE_3__[\"getAddressFieldsFromUI\"])(currentForm),\n      focusTarget = \"[data-checkout-component=\\\"shipping-method-check\\\"][value=\\\"\".concat(customUrlParams.methodID, \"\\\"]\");\n  urlParams.shipmentUUID = currentForm.querySelector('[name=\"shipmentUUID\"]').value;\n  urlParams = Object.assign(urlParams, customUrlParams);\n  _components_progress__WEBPACK_IMPORTED_MODULE_0__[\"showLoader\"](loaderTarget || currentForm);\n  return $.ajax({\n    url: url,\n    type: 'post',\n    dataType: 'json',\n    data: urlParams,\n    success: function success(response) {\n      if (response.error) {\n        window.location.href = response.redirectUrl;\n      } else {\n        $('body').trigger('shipping:selectShippingMethod', response);\n        Object(_checkoutHelpers__WEBPACK_IMPORTED_MODULE_4__[\"triggerUpdateCheckoutView\"])(response, {\n          keepOpen: true,\n          focusTarget: focusTarget\n        });\n\n        if (customUrlParams.methodID == 'BTQP' && $('input[name=storeId]').val() == '') {\n          var currentStore = $('.store-locator__result-item:not(.hidden)'),\n              currentStoreId = currentStore.length > 0 ? currentStore[0].id : '';\n\n          if (currentStoreId) {\n            $('input[name=storeId]').val(currentStoreId);\n          }\n        }\n\n        _components_progress__WEBPACK_IMPORTED_MODULE_0__[\"hideLoader\"]();\n      }\n    }\n  });\n}\n/**\n * Update the hidden form values that associate shipping info with product line items\n * @param {Object} productLineItem - the productLineItem model\n * @param {Object} shipping - the shipping (shipment model) model\n */\n\nfunction updateProductLineItemShipmentUUIDs(productLineItem, shipping) {\n  var pliUUIDEls = document.querySelectorAll(\"input[value=\\\"\".concat(productLineItem.UUID, \"\\\"]\"));\n  [].forEach.call(pliUUIDEls, function (currentPLIEl) {\n    currentPLIEl.form.querySelector('[name=\"shipmentUUID\"]').value = shipping.UUID;\n    currentPLIEl.form.querySelector('[name=\"originalShipmentUUID\"]').value = shipping.UUID;\n    currentPLIEl.form.closest('[data-shipment-uuid]').setAttribute('data-shipment-uuid', shipping.UUID);\n  });\n  $('body').trigger('shipping:updateProductLineItemShipmentUUIDs', {\n    productLineItem: productLineItem,\n    shipping: shipping\n  });\n}\n/**\n * Converts a raw date string into a formatted date string.\n * @param {string} date - Raw date string (e.g,. 2021-12-01)\n * @returns {string} Formatted date string (e.g., 12/1/2021)\n */\n\nfunction getFormattedDate(date) {\n  // NOTE: We need to convert to UTC time zone or else \"2021-09-09\" can be printed\n  // as \"9/8/21\" in local time.\n  var dateLocal = new Date(date),\n      utcOffset = dateLocal.getTimezoneOffset() * 60000,\n      dateUTC = new Date(dateLocal.getTime() + utcOffset);\n  return dateUTC.toLocaleDateString();\n}\n\n//# sourceURL=webpack:///./cartridges/app_rna_core/cartridge/client/default/js/checkout/shippingHelpers.js?");

/***/ })

}]);