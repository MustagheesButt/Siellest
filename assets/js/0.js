(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[0],{"./cartridges/int_googlerecaptcha/cartridge/client/default/js/helpers/reCaptcha.js":/*!*****************************************************************************************!*\
!*** ./cartridges/int_googlerecaptcha/cartridge/client/default/js/helpers/reCaptcha.js ***!
\*****************************************************************************************//*!exports provided: executeVerification, verificationCallback*/(function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"executeVerification\", function() { return executeVerification; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"verificationCallback\", function() { return verificationCallback; });\n\n/**\n * Generates a Google reCaptcha token that expires after 2mins, then attempts to verify the submission with an internal service call.\n * @return {[Promise]} [description]\n */\n\nfunction executeVerification() {\n  if (window.grecaptcha) {\n    return window.grecaptcha.execute(window.SFRA.SitePreferences.googleRecaptchaSiteKey, {\n      action: 'submit'\n    }).then(verificationCallback);\n  }\n}\n/**\n * Make an internal call to the ReCaptcha controller and service to get back the score from Google.\n * @param  {[type]} token [description]\n * @return {[type]}       [description]\n */\n\nfunction verificationCallback(token) {\n  return $.ajax({\n    type: 'POST',\n    url: \"\".concat(window.SFRA.Urls.verifyGoogleRecaptcha, \"?req=\").concat(token)\n  });\n}\n\n//# sourceURL=webpack:///./cartridges/int_googlerecaptcha/cartridge/client/default/js/helpers/reCaptcha.js?");})}]);